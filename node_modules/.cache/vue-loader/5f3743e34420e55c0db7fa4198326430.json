{"remainingRequest":"/Users/steini/Documents/GitHub/Mousikal-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/steini/Documents/GitHub/Mousikal-client/src/components/ArtistPage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/steini/Documents/GitHub/Mousikal-client/src/components/ArtistPage.vue","mtime":1576100930518},{"path":"/Users/steini/Documents/GitHub/Mousikal-client/node_modules/cache-loader/dist/cjs.js","mtime":499166100000},{"path":"/Users/steini/Documents/GitHub/Mousikal-client/node_modules/babel-loader/lib/index.js","mtime":499166100000},{"path":"/Users/steini/Documents/GitHub/Mousikal-client/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/steini/Documents/GitHub/Mousikal-client/node_modules/cache-loader/dist/cjs.js","mtime":499166100000},{"path":"/Users/steini/Documents/GitHub/Mousikal-client/node_modules/vue-loader/lib/index.js","mtime":499166100000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBDb21tZW50cyBmcm9tICJAL2NvbXBvbmVudHMvQ29tbWVudHMudnVlIjsKCmltcG9ydCBfIGZyb20gImxvZGFzaCI7CmltcG9ydCB7IGdldEFydGlzdEFsYnVtcyB9IGZyb20gIi4uL2FwaS9zcG90aWZ5L3Nwb3RpZnkiOwppbXBvcnQgeyBnZXRBbGJ1bVRyYWNrcyB9IGZyb20gIi4uL2FwaS9zcG90aWZ5L3Nwb3RpZnkiOwoKaW1wb3J0IHsgZ2V0TGlrZXMgfSBmcm9tICIuLi9hcGkvcHJpdmF0ZS9wcml2YXRlIjsKaW1wb3J0IHsgY3JlYXRlTGlrZSB9IGZyb20gIi4uL2FwaS9wcml2YXRlL3ByaXZhdGUiOwovL2ltcG9ydCB7IHVwZGF0ZUxpa2VzIH0gZnJvbSAiLi4vYXBpL3ByaXZhdGUvcHJpdmF0ZSI7CgpleHBvcnQgZGVmYXVsdCB7CiAgY29tcG9uZW50czogewogICAgQ29tbWVudHMKICB9LAogIHByb3BzOiB7CiAgICBhcnRpc3RJRDogU3RyaW5nLAogICAgbG9nZ2VkSW5Vc2VyTmFtZTogU3RyaW5nCiAgfSwKICBkYXRhOiAoKSA9PiAoewogICAgYXJ0aXN0OiAiIiwKICAgIGFydGlzdEluZm86IFtdLAogICAgYWxidW1DbGlja2VkT246IGZhbHNlLAogICAgY2xpY2tlZEFsYnVtSUQ6ICIiLAogICAgY2xpY2tlZE9uSW5mbzogW10sCiAgICB0cmFja3M6IFtdLAogICAgYWxidW1MaWtlczogW10KICB9KSwKICBtZXRob2RzOiB7CiAgICBhc3luYyBnZXRBcnRpc3RJbmZvKGlkKSB7CiAgICAgIHZhciByID0gYXdhaXQgZ2V0QXJ0aXN0QWxidW1zKGlkKTsKICAgICAgdGhpcy5hcnRpc3RJbmZvID0gcjsKICAgICAgdGhpcy5leHRyYWN0SW5mbygpOwogICAgfSwKICAgIGV4dHJhY3RJbmZvKCkgewogICAgICB0aGlzLmFydGlzdCA9IHRoaXMuYXJ0aXN0SW5mb1swXS5hcnRpc3Q7CiAgICAgIHRoaXMuYXJ0aXN0SW5mbyA9IF8udW5pcUJ5KHRoaXMuYXJ0aXN0SW5mbywgImltYWdlVVJMIik7CiAgICAgIHRoaXMuYXJ0aXN0SW5mbyA9IF8udW5pcUJ5KHRoaXMuYXJ0aXN0SW5mbywgImFsYnVtIik7CiAgICB9LAogICAgYXN5bmMgZ2V0QWxidW1EYXRhKGFsYnVtSUQpIHsKICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IGdldEFsYnVtVHJhY2tzKGFsYnVtSUQpOwogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdC5sZW5ndGg7IGkrKykgewogICAgICAgIHRoaXMudHJhY2tzW2ldID0gcmVzdWx0W2ldOwogICAgICB9CiAgICB9LAogICAgYWxidW1DbGlja2VkKGFsYnVtSUQsIGltYWdlVVJMLCBhbGJ1bU5hbWUpIHsKICAgICAgdGhpcy5hbGJ1bUNsaWNrZWRPbiA9IHRydWU7CiAgICAgIHRoaXMuZ2V0QWxidW1EYXRhKGFsYnVtSUQpOwogICAgICB0aGlzLmNsaWNrZWRPbkluZm9bMF0gPSBpbWFnZVVSTDsKICAgICAgdGhpcy5jbGlja2VkT25JbmZvWzFdID0gYWxidW1OYW1lOwogICAgfSwKICAgIC8vIGFsYnVtTGlrZWQoaWQpIHsKICAgIC8vICAgLy9yZXR1cm4gdHJ1ZSBpZiBhbGJ1bSBsaWtlZCBieSB1c2VyLCBlbHNlIHJldHVybiBmYWxzZQoKICAgIC8vIH0sCiAgICBhbGJ1bXNMaWtlQ291bnQoYWxidW1JRCkgewogICAgICB2YXIgbGlrZU51bSA9IDA7CiAgICAgIHRoaXMuYWxidW1MaWtlcy5mb3JFYWNoKGxpa2UgPT4gewogICAgICAgIGlmIChhbGJ1bUlEID09IGxpa2UuYWxidW1JRCAmJiBsaWtlLmxpa2VkID09ICJ0cnVlIikgewogICAgICAgICAgbGlrZU51bSsrOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHJldHVybiBsaWtlTnVtOwogICAgfSwKICAgIGFzeW5jIGxpa2VBbGJ1bShpZCkgewogICAgICBhd2FpdCBjcmVhdGVMaWtlKHsKICAgICAgICB1c2VyOiB0aGlzLmxvZ2dlZEluVXNlck5hbWUsCiAgICAgICAgYXJ0aXN0SUQ6IHRoaXMuYXJ0aXN0SUQsCiAgICAgICAgYWxidW1JRDogaWQKICAgICAgfSk7CiAgICAgIHRoaXMuYWxidW1MaWtlcy5wdXNoKHsKICAgICAgICBhbGJ1bUlEOiBpZCwKICAgICAgICBhcnRpc3RJRDogdGhpcy5hcnRpc3RJRCwKICAgICAgICBsaWtlZDogInRydWUiLAogICAgICAgIHVzZXI6IHRoaXMubG9nZ2VkSW5Vc2VyTmFtZQogICAgICB9KTsKICAgIH0sCiAgICBjaGVja2lmVXNlckxpa2VkKGFsYnVtSUQpIHsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmFsYnVtTGlrZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAoCiAgICAgICAgICBhbGJ1bUlEID09IHRoaXMuYWxidW1MaWtlc1tpXS5hbGJ1bUlEICYmCiAgICAgICAgICB0aGlzLmxvZ2dlZEluVXNlck5hbWUgPT0gdGhpcy5hbGJ1bUxpa2VzW2ldLnVzZXIgJiYKICAgICAgICAgIHRoaXMuYWxidW1MaWtlc1tpXS5saWtlZCA9PSAidHJ1ZSIKICAgICAgICApIHsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gZmFsc2U7CgogICAgICAvLyB0aGlzLmFsYnVtTGlrZXMuZm9yRWFjaChsaWtlID0+IHsKICAgICAgLy8gICBpZiAoCiAgICAgIC8vICAgICBhbGJ1bUlEID09IGxpa2UuYWxidW1JRCAmJgogICAgICAvLyAgICAgdGhpcy5sb2dnZWRJblVzZXJOYW1lID09IGxpa2UudXNlciAmJgogICAgICAvLyAgICAgbGlrZS5saWtlZCA9PSAidHJ1ZSIKICAgICAgLy8gICApIHsKICAgICAgLy8gICAgIHdpbmRvdy5jb25zb2xlLmxvZygiYWxidW0gbGlrZWQiKTsKICAgICAgLy8gICAgIHZlcmRpY3QgPSB0cnVlOwogICAgICAvLyAgIH0gZWxzZSB7CiAgICAgIC8vICAgICB3aW5kb3cuY29uc29sZS5sb2coImFsYnVtIG5vdCBsaWtlZCIpOwogICAgICAvLyAgICAgdmVyZGljdCA9IGZhbHNlOwogICAgICAvLyAgIH0KICAgICAgLy8gfSk7CgogICAgICAvLyByZXR1cm4gdmVyZGljdDsKICAgIH0sCiAgICAvLyB1bmxpa2VBbGJ1bShpZCkgewoKICAgIC8vIH0KICAgIGFzeW5jIGdldEFsbExpa2VzT2ZBbGJ1bShpZCkgewogICAgICB0aGlzLmFsYnVtTGlrZXMgPSBhd2FpdCBnZXRMaWtlcyh7IGFydGlzdElEOiBpZCB9KTsKICAgICAgLy93aW5kb3cuY29uc29sZS5sb2cobGlrZXMpCiAgICB9LAogICAgYXN5bmMgdW5saWtlQWxidW0oYWxidW1JRCkgewogICAgICByZXR1cm4gYWxidW1JRDsKICAgIH0KICB9LAogIGFzeW5jIG1vdW50ZWQoKSB7CiAgICBhd2FpdCB0aGlzLmdldEFydGlzdEluZm8odGhpcy5hcnRpc3RJRCk7CgogICAgdGhpcy5nZXRBbGxMaWtlc09mQWxidW0odGhpcy5hcnRpc3RJRCk7CiAgfQp9Owo="},{"version":3,"sources":["ArtistPage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"ArtistPage.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div v-if=\"!albumClickedOn\">\n      <div>\n        <h1>{{artist}}</h1>\n      </div>\n\n      <v-container>\n        <v-row dense>\n          <v-col v-for=\"album in artistInfo\" :key=\"album.albumID\" :cols=\"4\">\n            <v-card>\n              <v-img\n                v-on:click=\"albumClicked(album.albumID, album.imageURL, album.album)\"\n                :src=\"album.imageURL\"\n                class=\"white--text align-end\"\n                gradient=\"to bottom, rgba(0,0,0,.1), rgba(0,0,0,.5)\"\n                height=\"auto\"\n                width=\"auto\"\n              ></v-img>\n              <v-card-actions>\n                <v-card-title>\n                  <span class=\"title font-weight-light\">{{album.album}}</span>\n                </v-card-title>\n                <div v-if=\"loggedInUserName!='Anonymous'\">\n                  <v-btn icon v-if=\"!checkifUserLiked(album.albumID)\">\n                    <v-icon color=\"gray\" v-on:click=\"likeAlbum(album.albumID)\">mdi-heart</v-icon>\n                  </v-btn>\n                  <v-btn icon v-if=\"checkifUserLiked(album.albumID)\">\n                    <v-icon color=\"red\" v-on:click=\"unlikeAlbum(album.albumID)\">mdi-heart</v-icon>\n                  </v-btn>\n                  {{albumsLikeCount(album.albumID)}}\n                </div>\n              </v-card-actions>\n            </v-card>\n          </v-col>\n        </v-row>\n      </v-container>\n    </div>\n    <div v-if=\"albumClickedOn\">\n      <Comments\n        :loggedInUserName=\"this.loggedInUserName\"\n        :albumURL=\"clickedOnInfo[0]\"\n        :albumName=\"clickedOnInfo[1]\"\n        :tracks=\"this.tracks\"\n        :artistName=\"this.artist\"\n      ></Comments>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Comments from \"@/components/Comments.vue\";\n\nimport _ from \"lodash\";\nimport { getArtistAlbums } from \"../api/spotify/spotify\";\nimport { getAlbumTracks } from \"../api/spotify/spotify\";\n\nimport { getLikes } from \"../api/private/private\";\nimport { createLike } from \"../api/private/private\";\n//import { updateLikes } from \"../api/private/private\";\n\nexport default {\n  components: {\n    Comments\n  },\n  props: {\n    artistID: String,\n    loggedInUserName: String\n  },\n  data: () => ({\n    artist: \"\",\n    artistInfo: [],\n    albumClickedOn: false,\n    clickedAlbumID: \"\",\n    clickedOnInfo: [],\n    tracks: [],\n    albumLikes: []\n  }),\n  methods: {\n    async getArtistInfo(id) {\n      var r = await getArtistAlbums(id);\n      this.artistInfo = r;\n      this.extractInfo();\n    },\n    extractInfo() {\n      this.artist = this.artistInfo[0].artist;\n      this.artistInfo = _.uniqBy(this.artistInfo, \"imageURL\");\n      this.artistInfo = _.uniqBy(this.artistInfo, \"album\");\n    },\n    async getAlbumData(albumID) {\n      let result = await getAlbumTracks(albumID);\n      for (var i = 0; i < result.length; i++) {\n        this.tracks[i] = result[i];\n      }\n    },\n    albumClicked(albumID, imageURL, albumName) {\n      this.albumClickedOn = true;\n      this.getAlbumData(albumID);\n      this.clickedOnInfo[0] = imageURL;\n      this.clickedOnInfo[1] = albumName;\n    },\n    // albumLiked(id) {\n    //   //return true if album liked by user, else return false\n\n    // },\n    albumsLikeCount(albumID) {\n      var likeNum = 0;\n      this.albumLikes.forEach(like => {\n        if (albumID == like.albumID && like.liked == \"true\") {\n          likeNum++;\n        }\n      });\n      return likeNum;\n    },\n    async likeAlbum(id) {\n      await createLike({\n        user: this.loggedInUserName,\n        artistID: this.artistID,\n        albumID: id\n      });\n      this.albumLikes.push({\n        albumID: id,\n        artistID: this.artistID,\n        liked: \"true\",\n        user: this.loggedInUserName\n      });\n    },\n    checkifUserLiked(albumID) {\n      for (var i = 0; i < this.albumLikes.length; i++) {\n        if (\n          albumID == this.albumLikes[i].albumID &&\n          this.loggedInUserName == this.albumLikes[i].user &&\n          this.albumLikes[i].liked == \"true\"\n        ) {\n          return true;\n        }\n      }\n      return false;\n\n      // this.albumLikes.forEach(like => {\n      //   if (\n      //     albumID == like.albumID &&\n      //     this.loggedInUserName == like.user &&\n      //     like.liked == \"true\"\n      //   ) {\n      //     window.console.log(\"album liked\");\n      //     verdict = true;\n      //   } else {\n      //     window.console.log(\"album not liked\");\n      //     verdict = false;\n      //   }\n      // });\n\n      // return verdict;\n    },\n    // unlikeAlbum(id) {\n\n    // }\n    async getAllLikesOfAlbum(id) {\n      this.albumLikes = await getLikes({ artistID: id });\n      //window.console.log(likes)\n    },\n    async unlikeAlbum(albumID) {\n      return albumID;\n    }\n  },\n  async mounted() {\n    await this.getArtistInfo(this.artistID);\n\n    this.getAllLikesOfAlbum(this.artistID);\n  }\n};\n</script>\n\n"]}]}